# # 2차원 다이나믹 풀이
# n = int(input())
# a = [[]] # idx를 1번째부터 맞추기 위함
# for _ in range(n):
#     a.append(int(input()))

# # [i][0] : i번째가 0잔 연속 마신 것
# # [i][1] : i번째가 1잔 연속 마신 것
# # [i][2] : i번째가 2잔 연속 마신 것
# dp = [[0] * 3 for _ in range(10001)]

# dp[1][0] = 0    # 1번째는 0잔 연속 마신 것이니까 양은 0
# dp[1][1] = a[1] # 1번째는 1잔 연속 마신 것이니까 가장 첫번째 포도주를 마신것과 동일

# for i in range(1,n+1):
#     dp[i][0] = max(dp[i-1][0], dp[i-1][1] , dp[i-1][2]) # i번째 포도주가 0잔 연속이므로 , 이전까지는 0,1,2잔을 연속으로 먹는 것 중 최대의 양만 중요하다.
#     dp[i][1] = dp[i-1][0] + a[i] # i번째 포도주가 1잔 연속이므로 i-1번째는 반드시 0잔을 마셔야 함
#     dp[i][2] = dp[i-1][1] + a[i] # i번째 포도주가 2잔 연속이므로 i-2번째는 반드시 1잔을 마셔야 함

# print(max(dp[n]))

# 1차원 다이나믹 풀이
n = int(input())
a = [[]] # idx를 1번째부터 맞추기 위함
for _ in range(n):
    a.append(int(input()))

dp = [0] * (n+1)

dp[1] = a[1]

# n == 1인 경우에는 아래의 초기화를 못한다. (IndexError발생)
if n >= 2:
    dp[2] = a[1] + a[2]

for i in range(3, n+1):
    dp[i] = dp[i-1] # i번째 0회 마심 -> i-1번째까지 마시던말던 상관없다.
    dp[i] = max(dp[i], dp[i-2] + a[i]) # i번째 1회 연속 마심 -> i-1번째는 마시면 안되고, i-2번째까지는 마시던말던 상관없다.
    dp[i] = max(dp[i], dp[i-3] + a[i-1] + a[i]) # i번째 2회 연속 마심 -> i-1 , i번째는 마심 , i-2번째는 마시면 안되고, i-3번째까지는 마시던말던 상관없다.

    # dp[i] = max(dp[i-1] , dp[i-2] + a[i] , dp[i-3] + a[i-1] + a[i]) # 위 3 line 합친 것

print(dp[n])