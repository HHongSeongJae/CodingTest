'''
#하노이 탑에서 필요한 요소를 모두 매개변수로 받습니다.
하노이탑(원판, "시작기둥"에서 "대상기둥"으로 "보조기둥"을 활용해서):
    if 원판이 1개:
        이동 from 시작기둥 to 대상기둥

    if 원판이 2개 이상:
        #아래의 원판을 제외하고, 시작 기둥에서 보조 기둥으로 이동합니다.
        하노이탑(원판 -1, "시작기둥"에서 "보조기둥"으로 "대상기둥"을 활용해서)
        이동 from 시작기둥 to 대상기둥

        #아래의 원판을 제외하고, 보조 기둥에서 대상 기둥으로 이동합니다.
        하노이탑(덩어리 -1, "보조기둥"에서 "대상기둥"으로 "시작기둥"을 활용해서)
'''

## 메모리 초과
# def move(n,a, b, c): # n : 원판개수 , a : 시작 기둥 , b : 대상 기둥 , c : 보조 기둥
#     global count
#     #원판이 한 개이면 바로 대상 기둥으로 이동 가능
#     if n == 1:
#         count += 1
#         result.append([a,b])
#     #원판이 두 개 이상인 경우 -> 보조 기둥을 거친다.
#     else:
#         count += 1
#         move(n-1 ,a,c,b)
#         result.append([a,b]) # 시작 -> 보조
#         move(n-1 ,c,b,a)


# n = int(input())
# count = 0
# result = []
# move(n,1,3,2) #n개의 원판을 1번 기둥에서 3번 기둥으로 이동하는데 2번기둥을 활용

# print(count)
# for i in result:
#     print(*i)

def move(n,a, b, c): # n : 원판개수 , a : 시작 기둥 , b : 대상 기둥 , c : 보조 기둥W
    #원판이 한 개이면 바로 대상 기둥으로 이동 가능
    if n == 1:
        print(a, b)
        return
    #원판이 두 개 이상인 경우 -> 보조 기둥을 거친다.
    
    if n <= 20:
        move(n-1 ,a,c,b)
        print(a, b)
        move(n-1 ,c,b,a)


n = int(input())
print(2**n - 1) # ★★★★
move(n,1,3,2) #n개의 원판을 1번 기둥에서 3번 기둥으로 이동하는데 2번기둥을 활용